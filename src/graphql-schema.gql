# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddPriceToCompanyInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

type Company {
  canonical_url: String
  date_generated: DateTime
  exchange_country_iso: String
  exchange_symbol: String
  id: ID!
  listing_currency_iso: String
  name: String!
  price(
    """
    Specify to filter the records returned.
    """
    filter: CompanyPriceCloseFilter! = {}

    """
    Limit or page results.
    """
    paging: CursorPaging! = { first: 10 }

    """
    Specify to sort results.
    """
    sorting: [CompanyPriceCloseSort!]! = [{ direction: DESC, field: date }]
  ): CompanyPriceConnection!
  score: CompanyScore!
  security_name: String
  ticker_symbol: String
  unique_symbol: String
  unique_symbol_slug: String
}

type CompanyConnection {
  """
  Array of nodes.
  """
  nodes: [Company!]!

  """
  Paging information
  """
  pageInfo: OffsetPageInfo!

  """
  Fetch total count of records
  """
  totalCount: Int!
}

input CompanyDeleteFilter {
  and: [CompanyDeleteFilter!]
  dividend_score: NumberFieldComparison
  exchange_symbol: StringFieldComparison
  future_score: NumberFieldComparison
  health_score: NumberFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [CompanyDeleteFilter!]
  past_score: NumberFieldComparison
  price_fluctuation: NumberFieldComparison
  ticker_symbol: StringFieldComparison
  total_score: NumberFieldComparison
  unique_symbol: StringFieldComparison
  value_score: NumberFieldComparison
}

type CompanyDeleteResponse {
  canonical_url: String
  date_generated: DateTime
  exchange_country_iso: String
  exchange_symbol: String
  id: ID
  listing_currency_iso: String
  name: String
  security_name: String
  ticker_symbol: String
  unique_symbol: String
  unique_symbol_slug: String
}

input CompanyFilter {
  and: [CompanyFilter!]
  dividend_score: NumberFieldComparison
  exchange_symbol: StringFieldComparison
  future_score: NumberFieldComparison
  health_score: NumberFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [CompanyFilter!]
  past_score: NumberFieldComparison
  price: CompanyFilterCompanyPriceCloseFilter
  price_fluctuation: NumberFieldComparison
  score: CompanyFilterCompanyScoreFilter
  ticker_symbol: StringFieldComparison
  total_score: NumberFieldComparison
  unique_symbol: StringFieldComparison
  value_score: NumberFieldComparison
}

input CompanyFilterCompanyPriceCloseFilter {
  and: [CompanyFilterCompanyPriceCloseFilter!]
  company_id: StringFieldComparison
  date: StringFieldComparison
  date_created: DateFieldComparison
  or: [CompanyFilterCompanyPriceCloseFilter!]
  price: NumberFieldComparison
}

input CompanyFilterCompanyScoreFilter {
  and: [CompanyFilterCompanyScoreFilter!]
  company_id: StringFieldComparison
  date_generated: DateFieldComparison
  dividend: NumberFieldComparison
  future: NumberFieldComparison
  health: NumberFieldComparison
  id: IDFilterComparison
  management: NumberFieldComparison
  misc: NumberFieldComparison
  or: [CompanyFilterCompanyScoreFilter!]
  past: NumberFieldComparison
  total: NumberFieldComparison
  value: NumberFieldComparison
}

type CompanyPriceClose {
  company_id: String!
  date: String!
  date_created: DateTime!
  price: Float!
}

type CompanyPriceCloseEdge {
  """
  Cursor for this node.
  """
  cursor: ConnectionCursor!

  """
  The node containing the CompanyPriceClose
  """
  node: CompanyPriceClose!
}

input CompanyPriceCloseFilter {
  and: [CompanyPriceCloseFilter!]
  company: CompanyPriceCloseFilterCompanyFilter
  company_id: StringFieldComparison
  date: StringFieldComparison
  date_created: DateFieldComparison
  or: [CompanyPriceCloseFilter!]
  price: NumberFieldComparison
}

input CompanyPriceCloseFilterCompanyFilter {
  and: [CompanyPriceCloseFilterCompanyFilter!]
  dividend_score: NumberFieldComparison
  exchange_symbol: StringFieldComparison
  future_score: NumberFieldComparison
  health_score: NumberFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [CompanyPriceCloseFilterCompanyFilter!]
  past_score: NumberFieldComparison
  price_fluctuation: NumberFieldComparison
  ticker_symbol: StringFieldComparison
  total_score: NumberFieldComparison
  unique_symbol: StringFieldComparison
  value_score: NumberFieldComparison
}

input CompanyPriceCloseSort {
  direction: SortDirection!
  field: CompanyPriceCloseSortFields!
  nulls: SortNulls
}

enum CompanyPriceCloseSortFields {
  company_id
  date
  date_created
  price
}

type CompanyPriceConnection {
  """
  Array of edges.
  """
  edges: [CompanyPriceCloseEdge!]!

  """
  Paging information
  """
  pageInfo: PageInfo!
}

type CompanyScore {
  company_id: String!
  date_generated: DateTime!
  dividend: Float!
  future: Float!
  health: Float!
  id: ID!
  management: Float!
  misc: Float!
  past: Float!
  sentence: String
  total: Float!
  value: Float!
}

input CompanySort {
  direction: SortDirection!
  field: CompanySortFields!
  nulls: SortNulls
}

enum CompanySortFields {
  dividend_score
  exchange_symbol
  future_score
  health_score
  id
  name
  past_score
  price_fluctuation
  ticker_symbol
  total_score
  unique_symbol
  value_score
}

input CompanyUpdateFilter {
  and: [CompanyUpdateFilter!]
  dividend_score: NumberFieldComparison
  exchange_symbol: StringFieldComparison
  future_score: NumberFieldComparison
  health_score: NumberFieldComparison
  id: IDFilterComparison
  name: StringFieldComparison
  or: [CompanyUpdateFilter!]
  past_score: NumberFieldComparison
  price_fluctuation: NumberFieldComparison
  ticker_symbol: StringFieldComparison
  total_score: NumberFieldComparison
  unique_symbol: StringFieldComparison
  value_score: NumberFieldComparison
}

"""
Cursor for paging through collections
"""
scalar ConnectionCursor

input CreateCompany {
  canonical_url: String
  date_generated: DateTime
  exchange_country_iso: String
  exchange_symbol: String
  id: ID!
  listing_currency_iso: String
  name: String!
  security_name: String
  ticker_symbol: String
  unique_symbol: String
  unique_symbol_slug: String
}

input CreateManyCompaniesInput {
  """
  Array of records to create
  """
  companies: [CreateCompany!]!
}

input CreateOneCompanyInput {
  """
  The record to create
  """
  company: CreateCompany!
}

input CursorPaging {
  """
  Paginate after opaque cursor
  """
  after: ConnectionCursor

  """
  Paginate before opaque cursor
  """
  before: ConnectionCursor

  """
  Paginate first
  """
  first: Int

  """
  Paginate last
  """
  last: Int
}

input DateFieldComparison {
  between: DateFieldComparisonBetween
  eq: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  is: Boolean
  isNot: Boolean
  lt: DateTime
  lte: DateTime
  neq: DateTime
  notBetween: DateFieldComparisonBetween
  notIn: [DateTime!]
}

input DateFieldComparisonBetween {
  lower: DateTime!
  upper: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteManyCompaniesInput {
  """
  Filter to find records to delete
  """
  filter: CompanyDeleteFilter!
}

type DeleteManyResponse {
  """
  The number of records deleted.
  """
  deletedCount: Int!
}

input DeleteOneCompanyInput {
  """
  The id of the record to delete.
  """
  id: ID!
}

input IDFilterComparison {
  eq: ID
  gt: ID
  gte: ID
  iLike: ID
  in: [ID!]
  is: Boolean
  isNot: Boolean
  like: ID
  lt: ID
  lte: ID
  neq: ID
  notILike: ID
  notIn: [ID!]
  notLike: ID
}

type Mutation {
  addPriceToCompany(input: AddPriceToCompanyInput!): Company!
  createManyCompanies(input: CreateManyCompaniesInput!): [Company!]!
  createOneCompany(input: CreateOneCompanyInput!): Company!
  deleteManyCompanies(input: DeleteManyCompaniesInput!): DeleteManyResponse!
  deleteOneCompany(input: DeleteOneCompanyInput!): CompanyDeleteResponse!
  setPriceOnCompany(input: SetPriceOnCompanyInput!): Company!
  setScoreOnCompany(input: SetScoreOnCompanyInput!): Company!
  updateManyCompanies(input: UpdateManyCompaniesInput!): UpdateManyResponse!
  updateOneCompany(input: UpdateOneCompanyInput!): Company!
}

input NumberFieldComparison {
  between: NumberFieldComparisonBetween
  eq: Float
  gt: Float
  gte: Float
  in: [Float!]
  is: Boolean
  isNot: Boolean
  lt: Float
  lte: Float
  neq: Float
  notBetween: NumberFieldComparisonBetween
  notIn: [Float!]
}

input NumberFieldComparisonBetween {
  lower: Float!
  upper: Float!
}

type OffsetPageInfo {
  """
  true if paging forward and there are more records.
  """
  hasNextPage: Boolean

  """
  true if paging backwards and there are more records.
  """
  hasPreviousPage: Boolean
}

input OffsetPaging {
  """
  Limit the number of records returned
  """
  limit: Int

  """
  Offset to start returning records from
  """
  offset: Int
}

type PageInfo {
  """
  The cursor of the last returned record.
  """
  endCursor: ConnectionCursor

  """
  true if paging forward and there are more records.
  """
  hasNextPage: Boolean

  """
  true if paging backwards and there are more records.
  """
  hasPreviousPage: Boolean

  """
  The cursor of the first returned record.
  """
  startCursor: ConnectionCursor
}

type Query {
  companies(
    """
    Specify to filter the records returned.
    """
    filter: CompanyFilter! = {}

    """
    Limit or page results.
    """
    paging: OffsetPaging! = { limit: 10 }

    """
    Specify to sort results.
    """
    sorting: [CompanySort!]! = []
  ): CompanyConnection!
  company(
    """
    The id of the record to find.
    """
    id: ID!
  ): Company!
}

input SetPriceOnCompanyInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The ids of the relations.
  """
  relationIds: [ID!]!
}

input SetScoreOnCompanyInput {
  """
  The id of the record.
  """
  id: ID!

  """
  The id of relation.
  """
  relationId: ID!
}

"""
Sort Directions
"""
enum SortDirection {
  ASC
  DESC
}

"""
Sort Nulls Options
"""
enum SortNulls {
  NULLS_FIRST
  NULLS_LAST
}

input StringFieldComparison {
  eq: String
  gt: String
  gte: String
  iLike: String
  in: [String!]
  is: Boolean
  isNot: Boolean
  like: String
  lt: String
  lte: String
  neq: String
  notILike: String
  notIn: [String!]
  notLike: String
}

input UpdateCompany {
  canonical_url: String
  date_generated: DateTime
  exchange_country_iso: String
  exchange_symbol: String
  id: ID
  listing_currency_iso: String
  name: String
  security_name: String
  ticker_symbol: String
  unique_symbol: String
  unique_symbol_slug: String
}

input UpdateManyCompaniesInput {
  """
  Filter used to find fields to update
  """
  filter: CompanyUpdateFilter!

  """
  The update to apply to all records found using the filter
  """
  update: UpdateCompany!
}

type UpdateManyResponse {
  """
  The number of records updated.
  """
  updatedCount: Int!
}

input UpdateOneCompanyInput {
  """
  The id of the record to update
  """
  id: ID!

  """
  The update to apply.
  """
  update: UpdateCompany!
}
